#!/usr/bin/env python3

# ============================The main loop of the program can be found at the bottom============================

# First, initialise the global variables we need, notibally the neighbours, LSDB and routing tables
neighbours = {}
nodeGroups = []
LSDB = {}
routingTables = {}

nodeNames = []
LINKSTATE = False

# ============================Updating Link State============================
# Once the new startNode, endNode and cost is known, the nodeGroups, neighbours and LSDB tables can be updated.

# First is updating the neighbours dictionary.
# This function creates new entries in the two given node's neighbour tables, or removes them if the cost is -1
def UpdateNeighbourTables(startNode, endNode, cost):
    # First, initialise any nodes that don't have a neighbours set yet to have one
    for node in nodeNames:
        if not node in neighbours.keys():
            neighbours[node] = set()

    # If the cost is -1, remove the startNode and endNode from each other's dictionaries.
    # If the connection doesn't exist, we don't want to try to remove it!
    if cost == -1:
        if startNode in neighbours[endNode]:
            neighbours[endNode].remove(startNode)
        if endNode in neighbours[startNode]:
            neighbours[startNode].remove(endNode)

    # The cost not being -1 signifies we're adding, not removing, a connection!
    else:
        neighbours[startNode].add(endNode)
        neighbours[endNode].add(startNode)

    # print("Neighbours:", neighbours)


# Secondly, the nodeGroups array is built with Depth-first-search.
visitedNodes = set()
def DepthFirstSearch(indexNode, previousNode):
    # If indexNode is in visitedNodes, then return.
    if indexNode in visitedNodes:
        return
    
    # If indexNode is not in visitedNodes, add the indexNode to visitedNodes.
    visitedNodes.add(indexNode)

    # If previousNode is None, and the indexNode is not already in a group,
    # then create a new set containing only indexNode, and append it to nodeGroups.
    if previousNode == None:
        nodeGroups.append({indexNode})
    # If previousNode is not None, 
    # then search for a group containing previousNode in the nodeGroups array, and append indexNode to it.
    else:
        for group in nodeGroups:
            if previousNode in group:
                group.add(indexNode)
                break

    # Then for each neighbour node of indexNode, call the DFS function
    # with the neighbour node as the index node: DepthFirstSearch(neighbourNode, indexNode)
    for neighbourNode in neighbours[indexNode]:
        DepthFirstSearch(neighbourNode, indexNode)

def BuildNodeGroups():
    # Create an empty set of visitedNodes and loop through each indexNode in the neighbours dictionary.
    visitedNodes.clear()
    # Each time there is a change in node topography, we must re-build the nodeGroups array from scratch
    nodeGroups.clear()
    for indexNode in nodeNames:
        # From here, make a recursive DepthFirstSearch(indexNode, previousNode) function, taking the indexNode.
        DepthFirstSearch(indexNode, None)
    
    # print("Node Groups:", nodeGroups)


# Lastly, the LSDB dictionary is updated. 
def UpdateLSDBTables(startNode, endNode, cost):
    # If a node doesn't have an LSDB array, set it to an empty one
    for node in nodeNames:
        if not node in LSDB.keys():
            LSDB[node] = []

    # Loop through each group in nodeGroups, if startNode doesn't appear in the group, then skip the group.
    for group in nodeGroups:
        if startNode in group or endNode in group:
            # Else, create the new connection
            newConnection = {"startNode": startNode, "endNode": endNode, "cost": cost}

            # Then create a groupConnections array containing all of the unique connections
            # between all of the nodes in the group.
            groupConnections = []

            # Loop through each node in the group, and loop through their LSDB arrays.
            for node in group:
                # If there is a connection in a node's LSDB
                # that doesn't contain either the start or end node in it's group, remove the connection
                for connection in LSDB[node]:
                    if not connection["startNode"] in group and not connection["endNode"] in group:
                        LSDB[node].remove(connection)

                for connection in LSDB[node]:
                    # If the current connection is not in the groupConnections array, add it!
                    if not connection in groupConnections:
                        groupConnections.append(connection)
            
            # Next, search for the newConnection in the groupConnections array,
            oldConnection = None
            for connection in groupConnections:
                if connection["startNode"] == startNode and connection["endNode"] == endNode:
                    oldConnection = connection
                    break
            
            # Remove
            # If the connection is found, and the cost is -1, remove it
            if cost == -1:
                if oldConnection != None:
                    groupConnections.remove(oldConnection)
            # Update
            # If the cost is not -1, update the connection with the new cost.
            else:
                if oldConnection != None:
                    groupConnections.remove(oldConnection)
                    groupConnections.append(newConnection)
                # Add
                # If the connection isn't found, append the connection to the groupConnections array.
                else:
                    groupConnections.append(newConnection)
            
            # Finally, for each node in the nodeGroup, set their LSDB array to be the new groupConnections array.
            for node in group:
                LSDB[node] = groupConnections

    # print("LSDB:")
    # for node in LSDB:
        # print(f"{node}:")
        # for connection in LSDB[node]:
            # print(connection)


# This function builds the neighbour, nodeGroups and LSDB tables per line of input
def UpdateLinkState(startNode, endNode, cost):
    UpdateNeighbourTables(startNode, endNode, cost)
    BuildNodeGroups()
    UpdateLSDBTables(startNode, endNode, cost)

# ============================Building the routing table============================
import math

# Once the edge and neighbour tables are built, and there are "nodeGroup" sets of all the node names per group
# of connected nodes (each stored in one big nodeGroups array), each node will get an empty dictionary in the 
# routingTables dictionary.
def BuildRoutingTables():
    # Next a for loop is called on the big nodeGroups array, to loop through each group of connected nodes
    # one at a time.
    # Inside each loop is another loop, through each entry in the nodeGroup array, to build the routing
    # table for each node in the group. Something like a "GetRoutingTable(startNode, nodeGroup, startNodeLSDB)"
    # function will be called on a for loop though all of the nodes in the nodeGroup.
    for group in nodeGroups:
        for startNode in group:
            # Each empty dictionary will have empty strings initialised for values ".destination" and ".nextHop",
            # "infinity" to represent "infinity" or "uninitialised" for ".cost", and finally an empty ".path" array
            # to hold the order and names of the nodes needed to get to the destination node
            routingTables[startNode] = {}
            for endNode in group:
                # startNode doesn't have a row in the routing table to itself, as it is the source node
                if startNode != endNode:
                    routingTables[startNode][endNode] = {"nextHop": "", "cost": math.inf, "path": []}
            
            # The GetRoutingTable(startNode, nodeGroup, startNodeLSDB) function will then have all the info it needs to 
            # just build the routing table for the single node "startNode".
            # All of its logic is just implementing Dijkstra's algorithm as described below, where N = nodeGroup, N' is initialised as an empty array, 
            # and D() is just returning the cost from either LSDB, or the routing table itself.
            routingTables[startNode] = GetRoutingTable(startNode, group, LSDB[startNode])

    # print("Routing Tables:")
    # for startNode in routingTables:
        # print(f"{startNode}:")
        # for endNode in routingTables[startNode]:
            # print(endNode, routingTables[startNode][endNode])

# Dijkstra's algorithm
def GetRoutingTable(startNode, nodeGroup, startNodeLSDB):
    # INITIALISATION:
    # N' = {u} 
    # (N' means doneNodes, u means startNode)
    doneNodes = {startNode}
    # For convenience
    routingTable = routingTables[startNode]

    # for all nodes v 
    # if v is a neighbour of u
        # then D(v) = c(u,v) 
    # else D(v) = ∞ 
    # (D(v) means look up the cost between startNode and node v, initially, this is from the startNodeLSDB,
    # but once we start adding costs together, we'll be pulling from the routingTable itself + the cost from startNodeLSDB instead.
    # startNodeLSDB is just for the initial costs.)

    # (The else D(v) = ∞ part is handled before this function is called where we initialised the routing tables:
    # routingTables[startNode][endNode] = {"nextHop": "", "cost": math.inf, "path": []})
    for endNode in nodeGroup:
        if endNode in neighbours[startNode]:
            for connection in startNodeLSDB:
                if (connection["startNode"] == startNode and connection["endNode"] == endNode) or (connection["startNode"] == endNode and connection["endNode"] == startNode):
                    routingTable[endNode]["cost"] = connection["cost"]
                    # Their "next hop" value in the routing table is just set to themselves, since they are neighbours of startNode
                    routingTable[endNode]["nextHop"] = endNode
                    # Their path arrays are set to an array just containing themselves: [endNode]
                    routingTable[endNode]["path"] = [endNode]
                    break
    
    # Then we start the Dijkstra's algorithm loop
    # LOOP until N' = N
    while doneNodes != nodeGroup:
        # find w not in N' such that D(w) is a minimum
        # Choosing a node to iterate on
        minCost = math.inf
        minNode = None
        for endNode in nodeGroup:
            if endNode == startNode:
                continue

            endCost = routingTable[endNode]["cost"]
            if not endNode in doneNodes:
                # Start by initialising the minNode as the first node considered
                # If there's only one node left that's not done, then we have to pick that node anyway
                if endCost < minCost or minNode == None:
                    minCost = endCost
                    minNode = endNode
                # Tiebreaker time...
                elif endCost == minCost:
                    # First is choosing the minimum number of hops,
                    if len(routingTable[endNode]["path"]) < len(routingTable[minNode]["path"]):
                        minCost = endCost
                        minNode = endNode
                    elif len(routingTable[endNode]["path"]) > len(routingTable[minNode]["path"]):
                        minCost = minCost
                        minNode = minNode
                    # Second is choosing the first node name in alphabetical order
                    # Python has this wonderful property where if you compare 2 strings with a < operator, it returns if the string is
                    # first in alphabetical order from the second!
                    elif endNode < minNode:
                        minCost = endCost
                        minNode = endNode
                    elif endNode > minNode:
                        minCost = minCost
                        minNode = minNode

        
        # add w to N'
        doneNodes.add(minNode)

        # update D(v) for each neighbour v of w and not in N':
        # Next, for all neighbours of minNode, we check which ones are not in N'
        # (w means minNode)
        # Iterating on the chosen node
        for neighbour in neighbours[minNode]:
            if not neighbour in doneNodes:
                # D(v) = min(D(v), D(w) + c(w,v)) 
                # /* new cost to v is either old cost to v or known least path cost to w plus cost from w to v*/
                # First, we need to find the cost of going from minNode to neighbour
                for connection in startNodeLSDB:
                    if (connection["startNode"] == minNode and connection["endNode"] == neighbour) or (connection["startNode"] == neighbour and connection["endNode"] == minNode):
                        # Stuff to potentially update with
                        newPath = routingTable[minNode]["path"].copy()
                        newPath.append(neighbour)

                        oldPath = routingTable[neighbour]["path"]

                        oldCost = routingTable[neighbour]["cost"]
                        minNodeToNeighbourCost = connection["cost"]

                        newCost = minCost + minNodeToNeighbourCost

                        # Cases where we want to update the neighbour node's values from a newPath via the minNode
                        # Then, we consider if adding the cost of minNode to neighbour is cheaper than neighbour's current cost
                        costCheaper = oldCost > newCost
                        # Or if the cost is equal, but we have less hops to travel for the newPath via the minNode
                        costEqualButLessHops = oldCost == newCost and len(newPath) < len(oldPath)
                        # Or if the cost and hops are the same, but the minNode comes first alphabetically
                        costEqualAndSameHopsButAlphabeticallyFirst = oldCost == newCost and len(newPath) == len(oldPath) and minNode < neighbour

                        # If it is, then update neighbour with the new cost, path and nextHop values!
                        if costCheaper or costEqualButLessHops or costEqualAndSameHopsButAlphabeticallyFirst:
                            routingTable[neighbour]["cost"] = newCost
                            # So here, neighbour's cost value gets updated, so it find's minNode's current "next hop" value, and sets it's "next hop" value to minNode's in the routing table!
                            routingTable[neighbour]["nextHop"] = routingTable[minNode]["nextHop"]
                            # Also minNode's path array gets copied, as it is the previous node, and neighbour gets added to the array, and the array is set to neighbour's path array [minNode's path values... ,Y]
                            routingTable[neighbour]["path"] = newPath
                            
    return routingTable

# ============================Generating output============================
# Once requested nodes to print are known (stored in a nodesToPrint array) generating the output should be as simple as reading the appropriate values from the 3 main tables.
def PrintExpectedOutput(nodesToPrint):
    nodesToPrint.sort()

    for node in nodesToPrint:
        # Neighbour Table
        print(f"{node} Neighbour Table:")
        for neighbour in neighbours[node]:
            cost = None
            for connection in LSDB[node]:
                if (connection["startNode"] == node and connection["endNode"] == neighbour) or (connection["startNode"] == neighbour and connection["endNode"] == node):
                    cost = connection["cost"]
                    break

            print(f"{neighbour}|{cost}")

        print("")

        # Link-state Database (LSDB)
        print(f"{node} LSDB:")
        # Sort by endNode first, because then the startNode sort will apply second, and Python's sort function is stable, so the old order of the LSDB will be retained for ties in startNode name!
        LSDB[node].sort(key=lambda connection: connection["endNode"])
        LSDB[node].sort(key=lambda connection: connection["startNode"])
        for connection in LSDB[node]:
            startNode = connection["startNode"]
            endNode = connection["endNode"]
            cost = connection["cost"]
            print(f"{startNode}|{endNode}|{cost}")

        print("")

        # Routing Table
        print(f"{node} Routing Table:")
        # Sort by endNode, which is just the key for the routing table
        endNodes = sorted(routingTables[node].keys())
        for endNode in endNodes:
            nextHop = routingTables[node][endNode]["nextHop"]
            cost = routingTables[node][endNode]["cost"]
            print(f"{endNode}|{nextHop}|{cost}")

        print("")


# ============================Processing the input============================

# Input is going to be given via standard input, so I'm going to create a bunch of testing text files: 
# "test1.txt", "test2.txt" etc, and read into standard input into this python script via the command: 
# "Dijkstra < test.txt".
# These test files will be in the same directory as this python script is in, and contain the lines of input.

# Then we can use sys.stdin to get an array of lines of the standard input 
# (This is just how python does it, have to import the sys library as well), 
# and loop through all of the input lines.
# (Have to call line.rstrip() to get rid of the newline character at the end of each line)
import sys

for i, line in enumerate(sys.stdin):
    line = line.rstrip()

    # Before doing anything, check the line is "END", if it is, break the loop 
    # (since the whole program is one big loop, there shouldn't be any code underneath the loop 
    # and the program should just exit)
    if line == "END":
        break
    
    # Then we should check if the line is "LINKSTATE", if it is, set a LINKSTATE bool to true to tell our program
    #  we aren't reading node names any more. If "UPDATE" is read, continue (as in the keyword continue), and skip
    #  this line as our program is going to behave the same.
    if line == "LINKSTATE":
        LINKSTATE = True
        continue
    elif line == "UPDATE":
        continue

    # Now check if the LINKSTATE bool is true or not, if not, add the node name to a nodeNames array 
    # and we're done with this loop.
    if not LINKSTATE:
        nodeNames.append(line)
        continue
    
    # If the LINKSTATE bool is true, process the input. We split the string by spaces
    splitLine = line.split(" ")
    # then the first "X-X" connection string is split by dashes and put into "startNode" and "endNode" strings.
    startEndNodes = splitLine[0].split("-")
    startNode = startEndNodes[0]
    endNode = startEndNodes[1]
    # The second cost string is turned into an integer, and put into a "cost" integer variable.
    cost = int(splitLine[1])
    # The third print string is split by commas, 
    # and the resulting array of strings is put straight away into a "nodesToPrint" array variable.
    nodesToPrint = []
    if len(splitLine) > 2:
        nodesToPrint = splitLine[2].split(",")

    # print(f"\n{i+1}", "\nStart node:", startNode, "\nEnd node:", endNode, "\nCost:", cost, "\nNodes to print:", nodesToPrint)

    # Then call a UpdateLinkState(startNode, endNode, cost) function,
    # which is described by the "Updating Link State" section above.
    # This function will manipulate the global nodeGroups, neighbours and LSDB array/dictionary variables.
    UpdateLinkState(startNode, endNode, cost)

    # Then call a BuildRoutingTables() function to make just the routingTables dictionary,
    # which is described by the building the routing table function above.
    # This function will manipulate the global routingTables dictionary variable.
    BuildRoutingTables()

    # Finally, a PrintExpectedOutput(nodesToPrint) function will be called,
    # which is described by the "Generating output" section above.
    # This function will handle printing to standard output all of the required info from the nodes in the nodesToPrint array.
    PrintExpectedOutput(nodesToPrint)

    # Then the loop finally finishes a loops back to the next line of input.